const fs=require('fs');

function readFile()
{
    try{
        const data=fs.readFileSync('nonExistentFile.txt','utf8');
        console.log('Data Read from the file',data);
      }
      catch(error){
        console.error('An error occured while reading the file:',error.message);
      }
}

readFile();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
Custom Hooks

import { useState } from 'react';

function useCounter(initialValue = 0) {
  const [count, setCount] = useState(initialValue);

  const increment = () => {
    setCount(count + 1);
  };

  const decrement = () => {
    setCount(count - 1);
  };

  return {
    count,
    increment,
    decrement,
  };
}

export default useCounter;


import React from 'react';
import useCounter from './useCounter'; // Import the custom hook

function CounterComponent() {
  const counter = useCounter(0);

  return (
    <div>
      <h2>Counter: {counter.count}</h2>
      <button onClick={counter.increment}>Increment</button>
      <button onClick={counter.decrement}>Decrement</button>
    </div>
  );
}

export default CounterComponent;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
File Handling

const fs = require('fs'); // Import the 'fs' module

// Define the file path
const filePath = 'sample.txt';

// Create a new file
fs.writeFileSync(filePath, 'Hello, World!', 'utf8');
console.log('File created: sample.txt');

// Read the file
const data = fs.readFileSync(filePath, 'utf8');
console.log('File content:', data);

// Modify (write to) the file
const newText = 'Updated content';
fs.writeFileSync(filePath, newText, 'utf8');
console.log('File modified.');

// Append to the file
const appendText = '\nAppended content';
fs.appendFileSync(filePath, appendText, 'utf8');
console.log('Content appended.');

// Read the file after modification
const updatedData = fs.readFileSync(filePath, 'utf8');
console.log('Updated content:', updatedData);

/////////////////////////////////////////////////////////////////////////////////////////////////

Stream Module
const fs = require('fs');
const { Readable, Writable } = require('stream');

// Create a readable stream from source.txt
const sourceStream = fs.createReadStream('source.txt', 'utf8');

// Create a writable stream to destination.txt
const destinationStream = fs.createWriteStream('destination.txt');

// Pipe data from the source stream to the destination stream
sourceStream.pipe(destinationStream);

// Event handlers to track progress
sourceStream.on('data', (chunk) => {
  console.log(`Read ${chunk.length} bytes from source.txt`);
});

destinationStream.on('finish', () => {
  console.log('Data has been copied to destination.txt');
});

sourceStream.on('error', (err) => {
  console.error('Error reading source.txt:', err);
});

destinationStream.on('error', (err) => {
  console.error('Error writing to destination.txt:', err);
});
//////////////////////////////////////////////////////////////////////////////////////////

Inheritance in js

// Parent constructor function
function Animal(name) {
  this.name = name;
}

// Method added to the parent's prototype
Animal.prototype.speak = function() {
  console.log(this.name + ' makes a sound');
};

// Child constructor function
function Dog(name, breed) {
  // Call the parent constructor with 'this'
  Animal.call(this, name);
  this.breed = breed;
}

// Inherit from the parent prototype
Dog.prototype = Object.create(Animal.prototype);

// Child-specific method
Dog.prototype.bark = function() {
  console.log(this.name + ' barks');
};

// Create instances of both parent and child
const genericAnimal = new Animal('Generic Animal');
const myDog = new Dog('Buddy', 'Labrador');

// Use the inherited methods
genericAnimal.speak(); // Generic Animal makes a sound
myDog.speak(); // Buddy makes a sound
myDog.bark(); // Buddy barks
////////////////////////////////////////////////////////////////////
form using express

const express = require('express');
const app = express();
const port = 3000;

// Middleware to parse form data
app.use(express.urlencoded({ extended: false }));

// Serve static files (e.g., CSS, images)
app.use(express.static('public'));

// Define a route to serve the login form
app.get('/', (req, res) => {
  res.sendFile(__dirname + '/login.html');
});

// Handle form submission
app.post('/login', (req, res) => {
  const { username, password } = req.body;

  // You can implement authentication logic here
  // For this example, we'll just display the submitted data
  res.send(`Received: Username - ${username}, Password - ${password}`);
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});

------------------------

<!DOCTYPE html>
<html>
<head>
  <title>Login Form</title>
</head>
<body>
  <h1>Login</h1>
  <form action="/login" method="POST">
    <label for="username">Username:</label>
    <input type="text" id="username" name="username" required><br>

    <label for="password">Password:</label>
    <input type="password" id="password" name="password" required><br>

    <input type="submit" value="Submit">
  </form>
</body>
</html>

////////////////////////////////////////////////////////////////////////////////////////////////

Event Handling in React

import React, { useState } from 'react';

function EventHandling() {
  const [message, setMessage] = useState('Hover over me');
  const [inputValue, setInputValue] = useState('');

  const handleMouseEnter = () => {
    setMessage('Mouse entered!');
  };

  const handleMouseLeave = () => {
    setMessage('Mouse left!');
  };

  const handleInputChange = (e) => {
    setInputValue(e.target.value);
  };

  return (
    <div>
      <h2>Event Handling in React</h2>
      <div
        onMouseEnter={handleMouseEnter}
        onMouseLeave={handleMouseLeave}
        style={{ padding: '20px', backgroundColor: 'lightgray', cursor: 'pointer' }}
      >
        {message}
      </div>
      <br />
      <input
        type="text"
        placeholder="Type something"
        value={inputValue}
        onChange={handleInputChange}
      />
      <p>You typed: {inputValue}</p>
    </div>
  );
}

export default EventHandling;
/////////////////////////////////////////////////////////////
